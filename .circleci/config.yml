defaults: &defaults
  docker:
    - image: gcr.io/planet-4-151612/p4-builder:latest
  working_directory:  /home/circleci/

version: 2

jobs:
  build-develop:
    <<: *defaults
    environment:
      APP_HOSTNAME: k8s.p4.greenpeace.org
      APP_HOSTPATH: base
      CLOUDSQL_INSTANCE: p4-develop-k8s
      CONTAINER_PREFIX: planet4-base
      GOOGLE_PROJECT_ID: planet-4-151612
      HELM_NAMESPACE: develop
      TYPE: "Build"
      WP_DB_NAME: planet4-base_wordpress
      WP_TITLE: Greenpeace Base Development
    steps:
      - setup_remote_docker
      - run:
          name: Configure
          command: |
            activate-gcloud-account.sh
            mkdir -p /tmp/workspace/var
            mkdir -p /tmp/workspace/src
            echo "${CIRCLE_BUILD_NUM}" > /tmp/workspace/var/circle-build-num
      - run:
          name: Build containers
          working_directory: /home/circleci
          command: make
      - run:
          name: Notify failure
          when: on_fail
          command: notify-job-failure.sh
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - var
            - src

  test-selenium:
    <<: *defaults
    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: Build Selenium Test Container
          background: true
          command: |
            git clone https://github.com/greenpeace/planet4-docker-selenium-tests
            if ! docker build -t planet4-selenium-tests planet4-docker-selenium-tests
            then
              TYPE="Selenium Container Build" notify-job-failure.sh
              exit 1
            fi
            touch /tmp/workspace/selenium-container-built


      - run:
          name: Clone planet4-docker-compose
          command: |
            git clone https://github.com/greenpeace/planet4-docker-compose

      - run:
          name: Start docker-compose
          command: |
            export BUILD_TAG="build-$(cat /tmp/workspace/var/circle-build-num)"
            export APP_IMAGE=gcr.io/planet-4-151612/planet4-base-app:${BUILD_TAG}
            export OPENRESTY_IMAGE=gcr.io/planet-4-151612/planet4-base-openresty:${BUILD_TAG}

            pushd planet4-docker-compose
            docker-compose -p test -f docker-compose.stateless.yml up -d
            popd

      - run:
          name: Wait until containers are ready
          command: |
            # 2 seconds * 150 == 5+ minutes
            interval=2
            loop=150

            # Number of consecutive successes to qualify as 'up'
            threshold=2
            success=0
            until [[ $success -ge $threshold ]]
            do
              # Curl to container and expect 'greenpeace' in the response
              if docker run --network "container:test_openresty_1" --rm appropriate/curl -s -k "http://localhost" | grep -i "greenpeace" > /dev/null
              then
                success=$((success+1))
                echo "Success: $success/$threshold"
              else
                success=0
              fi

              loop=$((loop-1))
              if [[ $loop -lt 1 ]]
              then
                >&2 echo "[ERROR] Timeout waiting for docker-compose to start"
                >&2 docker-compose -p test logs
                exit 1
              fi

              [[ $success -ge $threshold ]] || sleep $interval
            done

      - run:
          name: Configure Selenium container
          command: |
            pushd planet4-docker-selenium-tests
            cat variables.env.example | sed "s/test.planet4.dev/localhost/g" > /tmp/workspace/var/variables.env
            popd

      - run:
          name: Configure WP Options
          command: |
            source /tmp/workspace/var/variables.env
            docker exec test_php-fpm_1 wp option set siteurl "http://localhost"
            docker exec test_php-fpm_1 wp option set home "http://localhost"
            docker exec test_php-fpm_1 wp user create ${PLANET4_USER} noreply@greenpeace.org --role=administrator --user_pass=${PLANET4_USER_PASS}
            docker exec test_redis_1 redis-cli flushdb

      - run:
          name: Wait for Selenium container to build
          command: |
            # 2 seconds * 150 == 5+ minutes
            interval=2
            loop=150

            while [ ! -f /tmp/workspace/selenium-container-built ]
            do
              loop=$((loop-1))
              if [[ $loop -lt 1 ]]
              then
                >&2 echo "[ERROR] Timeout waiting for docker-compose to start"
                >&2 docker-compose logs
                exit 1
              fi
              sleep $interval
            done

      - run:
          name: Run Selenium Tests
          command: |
            pushd planet4-docker-selenium-tests
            docker run -d \
              --env-file /tmp/workspace/var/variables.env \
              --name planet4-tests \
              --network "container:test_openresty_1" \
              --shm-size=2g \
              planet4-selenium-tests
            docker exec planet4-tests vendor/bin/phpunit -c tests
            docker stop planet4-tests
            popd

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - var

  deploy-develop:
    <<: *defaults
    environment:
      APP_HOSTNAME: k8s.p4.greenpeace.org
      APP_HOSTPATH: base
      CLOUDSQL_INSTANCE: p4-develop-k8s
      CONTAINER_PREFIX: planet4-base
      GOOGLE_PROJECT_ID: planet-4-151612
      HELM_NAMESPACE: develop
      TYPE: "Deployment"
      WP_DB_NAME: planet4-base_wordpress
      WP_TITLE: Greenpeace Base Development
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure
          command: activate-gcloud-account.sh
      - run:
          name: Deploy new containers
          environment:
            NEWRELIC_APPNAME: P4 base Development
          command: |
            export BUILD_TAG="build-$(cat /tmp/workspace/var/circle-build-num)"
            make deploy
      - run:
          name: Notify failure
          when: on_fail
          command: notify-job-failure.sh

  trigger-planet4:
    docker:
      - image: gcr.io/planet-4-151612/circleci-base:latest
    environment:
      TYPE: "Trigger"
    working_directory: /tmp/workspace
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - deploy:
          name: Trigger Planet 4 NRO sites
          command: |
              sites=(
                "brasil" \
                "eu-unit" \
                "flibble" \
                "india" \
                "luxembourg" \
                "mena" \
                "netherlands" \
              )
              for i in "${sites[@]}"
              do
                trigger-build.sh git@github.com:greenpeace/planet4-$i.git develop
              done
      - run:
          name: Notify failure
          when: on_fail
          command: notify-job-failure.sh

  notify-promote:
    docker:
      - image: gcr.io/planet-4-151612/circleci-base:latest
    working_directory:  /tmp/workspace/src
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Notify of held workflow
          command: |
            old_version=$(git-current-tag.sh)
            old_version=${old_version:-v0.0.0}
            new_version=$(increment-version.sh $old_version)
            echo $old_version > /tmp/workspace/var/old_version
            echo $new_version > /tmp/workspace/var/new_version
            TYPE="@rawalker Promote $new_version" notify-job-hold.sh
      - run:
          name: Notify failure
          when: on_fail
          command: TYPE="@rawalker Promote $new_version" notify-job-failure.sh
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - .

  promote:
    docker:
      - image: gcr.io/planet-4-151612/circleci-base:latest
    working_directory:  /tmp/workspace/src
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Notify of resumed workflow
          command: TYPE="@rawalker Promote $(cat /tmp/workspace/var/new_version)" notify-job-resume.sh
      - run: git flow init -d
      - deploy:
          name: Start release
          command: release-start.sh $(cat /tmp/workspace/var/new_version)
      - deploy:
          name: Update version numbers
          command: |
            # Get new version number and strip leading 'v' from tag
            tag=$(sed 's/^v//' /tmp/workspace/var/new_version)
            # Update composer.json version number
            mv composer.json /tmp/workspace/composer.old.json
            jq -M ".version=\"$tag\"" < /tmp/workspace/composer.old.json > composer.json
            # Re-validate composer.json
            if ! composer validate
            then
              TYPE="Composer validation" notify-job-failure.sh
            fi
            # Commit changed files
            git commit -a -m ":robot: Release v$tag"
      - deploy:
          name: Finish release
          command: |
            cd /tmp/workspace/src
            # Finish release
            if release-finish.sh $(cat /tmp/workspace/var/new_version)
            then
              TYPE="Release" notify-job-success.sh
            else
              TYPE="Release" notify-job-failure.sh
            fi
      - run:
          name: Notify failure
          when: on_fail
          command: TYPE="Release $(cat /tmp/workspace/var/new_version)" notify-job-failure.sh



workflows:
  version: 2
  develop:
    jobs:
    - build-develop:
        context: org-global
        filters:
          branches:
            ignore: master
          tags:
            ignore: /.*/
    - test-selenium:
        context: org-global
        requires:
          - build-develop
        filters:
          branches:
            ignore: master
          tags:
            ignore: /.*/
    # - deploy-develop:
    #     context: org-global
    #     requires:
    #       - build-develop
    #     filters:
    #       branches:
    #         ignore: master
    # - hold-promote:
    #     type: approval
    #     requires:
    #       - deploy-develop
    #     filters:
    #       branches:
    #         ignore: master
    # - trigger-planet4:
    #     context: org-global
    #     requires:
    #       - deploy-develop
    #     filters:
    #       branches:
    #         ignore: master
    # - notify-promote:
    #     context: org-global
    #     requires:
    #       - deploy-develop
    #     filters:
    #       branches:
    #         ignore: master
    # - promote:
    #     context: org-global
    #     requires:
    #       - hold-promote
    #       - notify-promote
    #     filters:
    #       branches:
    #         ignore: master
